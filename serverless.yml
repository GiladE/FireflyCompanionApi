# "org" ensures this Service is used with the correct Serverless Framework Access Key.
org: gilade
# ------
service: FireflyCompanionApi

custom:
  tableArn:
    connections: arn:aws:dynamodb:${self:provider.region}:*:table/${self:custom.dynamodb.connections.name}
    events: arn:aws:dynamodb:${self:provider.region}:*:table/${self:custom.dynamodb.events.name}
    games: arn:aws:dynamodb:${self:provider.region}:*:table/${self:custom.dynamodb.games.name}
    states: arn:aws:dynamodb:${self:provider.region}:*:table/${self:custom.dynamodb.states.name}
    players: arn:aws:dynamodb:${self:provider.region}:*:table/${self:custom.dynamodb.players.name}
  dynamodb:
    connections:
      name: ${self:service}-connections
      billingMode: PAY_PER_REQUEST
      attributeDefinitions:
        - AttributeName: channel_id
          AttributeType: S
        - AttributeName: connection_id
          AttributeType: S
      keySchema:
        - AttributeName: channel_id
          KeyType: HASH
        - AttributeName: connection_id
          KeyType: RANGE
      timeToLiveSpecification:
        Enabled: true
        AttributeName: ttl
    events:
      name: ${self:service}-events
      billingMode: PAY_PER_REQUEST
      attributeDefinitions:
        - AttributeName: game_id
          AttributeType: S
        - AttributeName: id
          AttributeType: S
      keySchema:
        - AttributeName: game_id
          KeyType: HASH
        - AttributeName: id
          KeyType: RANGE
    games:
      name: ${self:service}-games
      billingMode: PAY_PER_REQUEST
      attributeDefinitions:
        - AttributeName: game_id
          AttributeType: S
      keySchema:
        - AttributeName: game_id
          KeyType: HASH
    states:
      name: ${self:service}-state
      billingMode: PAY_PER_REQUEST
      attributeDefinitions:
        - AttributeName: game_id
          AttributeType: S
      keySchema:
        - AttributeName: state_id
          KeyType: HASH
    players:
      name: ${self:service}-players
      billingMode: PAY_PER_REQUEST
      attributeDefinitions:
        - AttributeName: game_id
          AttributeType: S
      keySchema:
        - AttributeName: player_id
          KeyType: HASH

provider:
  name: aws
  runtime: python3.12
  region: eu-west-1
  environment:
    CONNECTIONS_TABLE: ${self:custom.dynamodb.connections.name}
    EVENTS_TABLE: ${self:custom.dynamodb.events.name}
    GAMES_TABLE: ${self:custom.dynamodb.games.name}
    STATES_TABLE: ${self:custom.dynamodb.states.name}
    PLAYERS_TABLE: ${self:custom.dynamodb.players.name}
  iamRoleStatements:
    - Effect: "Allow"
      Action:
        - "dynamodb:PutItem"
        - "dynamodb:DeleteItem"
        - "dynamodb:Query"
        - "dynamodb:Scan"
      Resource:
        - ${self:custom.tableArn.connections}
        - ${self:custom.tableArn.connections}/index/ConnectionIdIndex
        - ${self:custom.tableArn.events}
        - ${self:custom.tableArn.games}
        - ${self:custom.tableArn.states}
        - ${self:custom.tableArn.players}
    - Effect: "Allow"
      Action:
        - "execute-api:ManageConnections"
      Resource:
        - arn:aws:execute-api:${self:provider.region}:*:*/*/@connections/*

functions:
  onConnect:
    handler: src.app.connect
    events:
      - websocket: $connect
  onDisconnect:
    handler: src.app.disconnect
    events:
      - websocket: $disconnect
  onMessage:
    handler: src.app.message
    events:
      - websocket: $default

resources:
  Resources:
    ConnectionsDynamoDbTable:
      Type: 'AWS::DynamoDB::Table'
      Properties:
        TableName: ${self:custom.dynamodb.connections.name}
        AttributeDefinitions:
          - AttributeName: channel_id
            AttributeType: S
          - AttributeName: connection_id
            AttributeType: S
        KeySchema:
          - AttributeName: channel_id
            KeyType: HASH
          - AttributeName: connection_id
            KeyType: RANGE
        BillingMode: PAY_PER_REQUEST
        TimeToLiveSpecification:
          Enabled: true
          AttributeName: ttl
        GlobalSecondaryIndexes:
          - IndexName: ConnectionIdIndex
            KeySchema:
              - AttributeName: connection_id
                KeyType: HASH
            Projection:
              ProjectionType: ALL

    EventsDynamoDbTable:
      Type: 'AWS::DynamoDB::Table'
      Properties: 
        TableName: ${self:custom.dynamodb.events.name}
        AttributeDefinitions: 
          - AttributeName: game_id
            AttributeType: S
          - AttributeName: id
            AttributeType: S
        KeySchema: 
          - AttributeName: game_id
            KeyType: HASH
          - AttributeName: id
            KeyType: RANGE
        BillingMode: PAY_PER_REQUEST

    GamesDynamoDbTable:
      Type: 'AWS::DynamoDB::Table'
      Properties:
        TableName: ${self:custom.dynamodb.games.name}
        AttributeDefinitions:
          - AttributeName: game_id
            AttributeType: S
        KeySchema:
          - AttributeName: game_id
            KeyType: HASH
        BillingMode: PAY_PER_REQUEST

    StatesDynamoDbTable:
      Type: 'AWS::DynamoDB::Table'
      Properties:
        TableName: ${self:custom.dynamodb.states.name}
        AttributeDefinitions:
          - AttributeName: game_id
            AttributeType: S
          - AttributeName: state_id
            AttributeType: S
        KeySchema:
          - AttributeName: game_id
            KeyType: HASH
          - AttributeName: state_id
            KeyType: RANGE
        BillingMode: PAY_PER_REQUEST

    PlayersDynamoDbTable:
      Type: 'AWS::DynamoDB::Table'
      Properties:
        TableName: ${self:custom.dynamodb.players.name}
        AttributeDefinitions:
          - AttributeName: game_id
            AttributeType: S
          - AttributeName: player_id
            AttributeType: S
        KeySchema:
          - AttributeName: game_id
            KeyType: HASH
          - AttributeName: player_id
            KeyType: RANGE
        BillingMode: PAY_PER_REQUEST

plugins:
  - serverless-python-requirements
  - serverless-offline